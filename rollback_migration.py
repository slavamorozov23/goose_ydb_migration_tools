#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from __future__ import annotations

import re
import shlex
import shutil
import subprocess
import sys
from dataclasses import dataclass
from pathlib import Path
from typing import Optional, Tuple

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ===
YDB_SECURE_ENDPOINT: str = "grpcs://ydb.serverless.yandexcloud.net:2135"
YDB_DATABASE_PATH_DEFAULT: str = "/ru-central1/b1g2bgg0i9r8beucbthc/etnhgtg29jpjakvf0v6d"

PROJECT_ROOT_DIRECTORY: Path = Path(__file__).resolve().parent
IAM_TOKEN_FILE: Path = PROJECT_ROOT_DIRECTORY / "iam.token"

MASK_SECRETS_IN_LOGS = True


# ---------- helpers ----------

def read_iam_token(file_path: Path) -> str:
    if not file_path.exists():
        raise RuntimeError("> –ù–µ –Ω–∞–π–¥–µ–Ω iam.token ‚Äî —Å–ø–µ—Ä–≤–∞ –∑–∞–ø—É—Å—Ç–∏ create_migration.py")
    tok = file_path.read_text(encoding="utf-8").strip()
    if not tok:
        raise RuntimeError("> –§–∞–π–ª iam.token –ø—É—Å—Ç ‚Äî –ø–µ—Ä–µ—Å–æ–∑–¥–∞–π —Ç–æ–∫–µ–Ω: python create_migration.py")
    return tok


def build_dsn(endpoint: str, db_path: str, access_token: str) -> str:
    return (
        f"{endpoint}{db_path}"
        "?go_query_mode=scripting"
        "&go_fake_tx=scripting"
        "&go_query_bind=declare,numeric"
        f"&token={access_token}"
    )


def mask_secrets_in_text(s: str) -> str:
    return re.sub(r"(token=)[^&'\"]+", r"\1***", s)


def check_goose_installed() -> None:
    path = shutil.which("goose")
    if not path:
        raise RuntimeError("> –ù–µ –Ω–∞–π–¥–µ–Ω 'goose' –≤ PATH. –£—Å—Ç–∞–Ω–æ–≤–∏: go install github.com/pressly/goose/v3/cmd/goose@latest")
    try:
        subprocess.run([path, "-h"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    except Exception:
        raise RuntimeError("> 'goose' –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è. –ü—Ä–æ–≤–µ—Ä—å —É—Å—Ç–∞–Ω–æ–≤–∫—É/PATH.")


@dataclass
class ProcResult:
    code: int
    out: str
    err: str


def run_goose(args: list[str]) -> ProcResult:
    printable = " ".join(shlex.quote(a) for a in args)
    if MASK_SECRETS_IN_LOGS:
        printable = mask_secrets_in_text(printable)
    print(f"\n$ {printable}")
    cp = subprocess.run(args, text=True, capture_output=True)
    out, err = cp.stdout or "", cp.stderr or ""
    if out.strip():
        print(out.rstrip())
    if cp.returncode != 0 and err.strip():
        print(err.rstrip())
    return ProcResult(cp.returncode, out, err)


# === —Ç–∏–ø–æ–≤—ã–µ –æ—à–∏–±–∫–∏ (YDB/goose) ===
PATTERNS: list[tuple[str, str, bool]] = [
    (r"\bUnauthenticated\b|\bUNAUTHENTICATED\b", "> –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: –ø—Ä–æ–≤–µ—Ä—å token –≤ iam.token.", False),
    (r"\bPERMISSION_DENIED\b", "> –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é ‚Äî –ø—Ä–æ–≤–µ—Ä—å —Ä–æ–ª–∏/–¥–æ—Å—Ç—É–ø.", False),
    (r"\bDEADLINE_EXCEEDED\b", "> –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —Ç–∞–π–º–∞—É—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä—å —Å–µ—Ç—å/—É–≤–µ–ª–∏—á—å —Ç–∞–π–º–∞—É—Ç.", False),

    (r"code\s*=\s*400130|\bALREADY_EXISTS\b", "> –û–±—ä–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî —á–∞—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥–∞ —É–∂–µ –±—ã–ª–∞.", True),
    (r"code\s*=\s*400070|\bSCHEME_ERROR\b|\bGENERIC_ERROR\b", "> –û—à–∏–±–∫–∞ —Å—Ö–µ–º—ã ‚Äî –ø—Ä–æ–≤–µ—Ä—å DDL/–Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫/—Ç–∏–ø–æ–≤.", False),
    (r"code\s*=\s*400140|\bNOT_FOUND\b", "> –û–±—ä–µ–∫—Ç —Å—Ö–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å –±–∞–∑—ã/–∏–º—è —Ç–∞–±–ª–∏—Ü—ã.", False),
    (r"code\s*=\s*400090|\bTIMEOUT\b", "> –ò—Å—Ç—ë–∫ operation timeout –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ‚Äî —á–∞—Å—Ç–∏—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ.", False),
    (r"code\s*=\s*400050|\bUNAVAILABLE\b", "> –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–∑–∂–µ.", False),
    (r"code\s*=\s*400060|\bOVERLOADED\b", "> –ö–ª–∞—Å—Ç–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω ‚Äî —Å–¥–µ–ª–∞–π —Ä–µ—Ç—Ä–∞–∏ —Å –ø–∞—É–∑–∞–º–∏.", False),

    (r'Column: ".*?" already exists', "> –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî —á–∞—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥–∞ —É–∂–µ –±—ã–ª–∞.", True),
    (r"failed to close DB.*DeadlineExceeded", "> –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.", True),
]


def explain_error(stderr: str, stdout: str) -> tuple[str, bool]:
    s = f"{stdout}\n{stderr}"
    for pat, msg, cont in PATTERNS:
        if re.search(pat, s, flags=re.IGNORECASE | re.DOTALL):
            return msg, cont
    return ("> –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ goose/YDB ‚Äî —Å–º–æ—Ç—Ä–∏ stderr –≤—ã—à–µ.", False)


# ---------- –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞ (Tk) ----------

def pick_migration_file(start_dir: Path) -> Path:
    try:
        import tkinter as tk
        from tkinter import filedialog
    except Exception as e:
        raise RuntimeError("tkinter –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: —É—Å—Ç–∞–Ω–æ–≤–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Tk –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º") from e

    root = tk.Tk()
    root.withdraw()
    path_str = filedialog.askopenfilename(
        initialdir=str(start_dir),
        title="–í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –û–¢–ö–ê–¢–ê (.sql)",
        filetypes=[("SQL files", "*.sql"), ("All files", "*.*")],
    )
    root.destroy()
    if not path_str:
        raise SystemExit("> –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    return Path(path_str)


# ---------- —É—Ç–∏–ª–∏—Ç—ã goose ----------

def goose_status(dsn: str, migrations_dir: Path) -> None:
    args = ["goose", "-dir", str(migrations_dir), "ydb", dsn, "status"]
    pr = run_goose(args)
    if pr.code == 0:
        return
    msg, cont = explain_error(pr.err, pr.out)
    print(msg)
    if not cont:
        raise SystemExit(1)


def goose_version(dsn: str, migrations_dir: Path) -> Optional[int]:
    args = ["goose", "-dir", str(migrations_dir), "ydb", dsn, "version"]
    pr = run_goose(args)
    txt = (pr.out or "") + "\n" + (pr.err or "")
    m = re.search(r"version\s+(\d+)", txt, re.IGNORECASE)
    if (pr.code == 0 or "failed to close DB" in txt) and m:
        try:
            return int(m.group(1))
        except ValueError:
            return None
    return None


def goose_down_to(dsn: str, migrations_dir: Path, target_version: int) -> None:
    args = ["goose", "-dir", str(migrations_dir), "ydb", dsn, "down-to", str(target_version)]
    pr = run_goose(args)
    if pr.code == 0:
        return
    msg, cont = explain_error(pr.err, pr.out)
    print(msg)
    if not cont:
        raise SystemExit(1)


# ---------- —Ä–∞–∑–±–æ—Ä —Ñ–∞–π–ª–∞ ----------

def detect_targets_hint(sql_text: str) -> list[str]:
    targets: list[str] = []
    for line in sql_text.splitlines():
        line = line.strip()
        if line.startswith("--  - "):  # –∏–∑ create_migration.py
            targets.append(line[6:].strip())
        else:
            m = re.search(r"`(/ru-central1/[^`]+)`", line)  # ALTER TABLE `/ru-central1/...`
            if m:
                targets.append(m.group(1))
    # —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞
    seen = set()
    uniq = []
    for t in targets:
        if t not in seen:
            seen.add(t)
            uniq.append(t)
    return uniq


def extract_db_path_from_abs_table(abs_table_path: str) -> Optional[str]:
    """
    /ru-central1/<cloud>/<db>/<...> -> /ru-central1/<cloud>/<db>
    """
    if not abs_table_path.startswith("/ru-central1/"):
        return None
    parts = abs_table_path.strip("/").split("/")
    if len(parts) < 3:
        return None
    return "/" + "/".join(parts[:3])


def detect_db_path_from_sql(sql_text: str) -> Optional[str]:
    # 1) –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    for line in sql_text.splitlines():
        line = line.strip()
        if line.startswith("--  - "):
            candidate = line[6:].strip()
            dbp = extract_db_path_from_abs_table(candidate)
            if dbp:
                return dbp
    # 2) –∏–∑ ALTER —Å –±—ç–∫—Ç–∏–∫–∞–º–∏
    for m in re.finditer(r"`(/ru-central1/[^`]+)`", sql_text):
        dbp = extract_db_path_from_abs_table(m.group(1))
        if dbp:
            return dbp
    # 3) –∏–∑ ¬´—Å—ã—Ä—ã—Ö¬ª –ø—É—Ç–µ–π
    m = re.search(r"(/ru-central1/[\w\-]+/[\w\-]+)", sql_text)
    if m:
        return m.group(1)
    return None


def extract_version_from_filename(file_name: str) -> Optional[int]:
    """
    –ù–ï –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–≥–æ. –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é ¬´–¥–ª–∏–Ω–Ω—É—é¬ª –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–∏—Ñ—Ä –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∫–∞–∫ –≤–µ—Ä—Å–∏—é.
    """
    m = re.search(r"(\d{6,})", file_name) or re.search(r"(\d+)", file_name)
    if not m:
        return None
    try:
        return int(m.group(1))
    except ValueError:
        return None


# ---------- main ----------

def main() -> None:
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º goose...")
    check_goose_installed()

    print("üîê –ß–∏—Ç–∞–µ–º IAM-—Ç–æ–∫–µ–Ω...")
    token = read_iam_token(IAM_TOKEN_FILE)

    print("üóÇ –í—ã–±–∏—Ä–∞–µ–º .sql –¥–ª—è –û–¢–ö–ê–¢–ê...")
    chosen = pick_migration_file(PROJECT_ROOT_DIRECTORY)
    if not chosen.exists():
        raise RuntimeError(f"> –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {chosen}")

    # —á–∏—Ç–∞–µ–º SQL –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
    try:
        raw_sql = chosen.read_text(encoding="utf-8", errors="ignore")
    except Exception:
        raw_sql = ""

    targets = detect_targets_hint(raw_sql)
    if targets:
        print(f"üì¶ –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –∫ {len(targets)} —Ç–∞–±–ª–∏—Ü–∞–º:")
        for t in targets[:12]:
            print(f"   ‚Ä¢ {t}")
        if len(targets) > 12:
            print(f"   ‚Ä¶ –∏ –µ—â—ë {len(targets)-12}")
    else:
        print("üì¶ –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö/DDL.")

    # –û–ø—Ä–µ–¥–µ–ª–∏–º database path –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    db_path_detected = detect_db_path_from_sql(raw_sql)
    db_path_final = db_path_detected or YDB_DATABASE_PATH_DEFAULT
    if db_path_detected and db_path_detected != YDB_DATABASE_PATH_DEFAULT:
        print(f"üè∑  –û–±–Ω–∞—Ä—É–∂–µ–Ω database path –≤ —Ñ–∞–π–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏: {db_path_detected}")
        print(f"üß≠ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π –ø—É—Ç—å –≤–º–µ—Å—Ç–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ ({YDB_DATABASE_PATH_DEFAULT}).")
    else:
        print(f"üß≠ –ò—Å–ø–æ–ª—å–∑—É–µ–º database path –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {YDB_DATABASE_PATH_DEFAULT}")

    print("üîó –ì–æ—Ç–æ–≤–∏–º DSN –¥–ª—è YDB...")
    dsn = build_dsn(YDB_SECURE_ENDPOINT, db_path_final, token)

    mig_dir = chosen.parent.resolve()

    print("\nüîé –°—Ç–∞—Ç—É—Å –¥–æ –æ—Ç–∫–∞—Ç–∞:")
    goose_status(dsn, mig_dir)

    cur_ver = goose_version(dsn, mig_dir)
    if cur_ver is not None:
        print(f"> –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –ë–î: {cur_ver}")

    version = extract_version_from_filename(chosen.name)
    if version is None:
        print(
            "\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞. "
            "Goose –¥–µ–ª–∞–µ—Ç –æ—Ç–∫–∞—Ç –ø–æ –ù–û–ú–ï–†–£ –≤–µ—Ä—Å–∏–∏ (–∏–∑ –∏–º–µ–Ω–∏). "
            "–ü–µ—Ä–µ–∏–º–µ–Ω—É–π —Ñ–∞–π–ª —Å —á–∏—Å–ª–æ–≤—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20251026163810_*.sql) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞."
        )
        sys.exit(2)

    if cur_ver is not None and cur_ver < version:
        print(f"\n> –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è {version} –µ—â—ë –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ (—Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è {cur_ver}). –û—Ç–∫–∞—Ç—ã–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ.")
    else:
        target = version - 1
        print(f"\n‚è™ –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–∫–∞—Ç: down-to {target} (—Å–Ω–∏–º–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –∏ –≤—Å–µ –±–æ–ª–µ–µ –Ω–æ–≤—ã–µ).")
        goose_down_to(dsn, mig_dir, target)

    print("\nüîé –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞:")
    goose_status(dsn, mig_dir)

    print("\n‚úÖ –û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n> –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        sys.exit(1)
    except Exception as e:
        print(f"\n[ERROR] {e}")
        sys.exit(1)
